/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.uabc.algoritmos.yugioh.upgrade;

import javax.swing.JOptionPane;

/**
 *
 * @author JesusOmar Leal
 */
public class CollectionIDE extends javax.swing.JFrame {

    Audio audio = new Audio();
    LectorCSV lector = new LectorCSV();
    boolean ordenarAscendente = true;
    boolean ordenarDencendente = false;

    /**
     * Creates new form CollectionIDE
     */
    public CollectionIDE() {

        initComponents();
        lector.obtenerLista();
        audio.playAudio();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        EscogerNiveles = new javax.swing.JComboBox<>();
        EscogerAtributos = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        MostrarTodasCartas = new javax.swing.JButton();
        MostrarPorNivel = new javax.swing.JButton();
        MostrarPorAtributo = new javax.swing.JButton();
        MostrarPorAtaque = new javax.swing.JButton();
        MostrarPorDefensa = new javax.swing.JButton();
        OrganizarAltoBajoValor = new javax.swing.JCheckBox();
        OrganizarBajoAltoValor = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jToggleButton2 = new javax.swing.JToggleButton();
        ChooseLevelB = new javax.swing.JButton();
        ChooseAtributeB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        EscogerNiveles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        EscogerNiveles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscogerNivelesActionPerformed(evt);
            }
        });

        EscogerAtributos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DARK", "EARTH", "FIRE", "LIGHT", "SPELL", "TRAP", "WATER", "WIND" }));
        EscogerAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EscogerAtributosActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose Level");

        jLabel4.setText("Choose Attribute");

        MostrarTodasCartas.setText("Show All Cards");
        MostrarTodasCartas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarTodasCartasActionPerformed(evt);
            }
        });

        MostrarPorNivel.setText("Show By Level");
        MostrarPorNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarPorNivelActionPerformed(evt);
            }
        });

        MostrarPorAtributo.setText("Show By Attribute");
        MostrarPorAtributo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarPorAtributoActionPerformed(evt);
            }
        });

        MostrarPorAtaque.setText("Show By Attack Points");
        MostrarPorAtaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarPorAtaqueActionPerformed(evt);
            }
        });

        MostrarPorDefensa.setText("Show By Defense Points");
        MostrarPorDefensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarPorDefensaActionPerformed(evt);
            }
        });

        buttonGroup1.add(OrganizarAltoBajoValor);
        OrganizarAltoBajoValor.setText("High To Low (Z-A)");
        OrganizarAltoBajoValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrganizarAltoBajoValorActionPerformed(evt);
            }
        });

        buttonGroup1.add(OrganizarBajoAltoValor);
        OrganizarBajoAltoValor.setSelected(true);
        OrganizarBajoAltoValor.setText("Low To High (A-Z)");
        OrganizarBajoAltoValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrganizarBajoAltoValorActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon("/home/omarleal/NetBeansProjects/YuGiOh/src/main/java/com/practica4/yugioh/assets/logo.png")); // NOI18N

        jToggleButton2.setIcon(new javax.swing.ImageIcon("/home/omarleal/NetBeansProjects/YuGiOh/src/main/java/com/practica4/yugioh/assets/off.png")); // NOI18N
        jToggleButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jToggleButton2MouseReleased(evt);
            }
        });
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        ChooseLevelB.setText("jButton1");
        ChooseLevelB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseLevelBActionPerformed(evt);
            }
        });

        ChooseAtributeB.setText("jButton2");
        ChooseAtributeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseAtributeBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MostrarPorNivel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MostrarPorAtaque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MostrarPorAtributo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MostrarTodasCartas)
                    .addComponent(MostrarPorDefensa)
                    .addComponent(jToggleButton2))
                .addGap(79, 79, 79)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(EscogerNiveles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChooseLevelB, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OrganizarAltoBajoValor)
                            .addComponent(OrganizarBajoAltoValor)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(EscogerAtributos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChooseAtributeB, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(85, 85, 85))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {MostrarPorAtaque, MostrarPorAtributo, MostrarPorDefensa, MostrarPorNivel, MostrarTodasCartas});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EscogerNiveles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChooseLevelB))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EscogerAtributos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChooseAtributeB)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(MostrarTodasCartas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MostrarPorNivel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MostrarPorAtributo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(MostrarPorAtaque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MostrarPorDefensa)
                            .addComponent(OrganizarAltoBajoValor))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrganizarBajoAltoValor)
                .addGap(18, 18, 18)
                .addComponent(jToggleButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {MostrarPorAtaque, MostrarPorAtributo, MostrarPorDefensa, MostrarPorNivel, MostrarTodasCartas});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MostrarTodasCartasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarTodasCartasActionPerformed
        lector.clear();
        lector.obtenerLista();

        VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
        ordenamientos.setVisible(true);
        ordenamientos.setLocationRelativeTo(null);

    }//GEN-LAST:event_MostrarTodasCartasActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        if (audio.isAudioPlaying()) {
            audio.stopAudio();
        } else {
            audio.playAudio();
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton2MouseReleased

    }//GEN-LAST:event_jToggleButton2MouseReleased

    private void MostrarPorNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarPorNivelActionPerformed

        if (!ordenarAscendente && !ordenarDencendente) {

            JOptionPane.showMessageDialog(this, "Selecciona si ordenar Ascendente o Dencendente", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            lector.clear();
            lector.obtenerLista();
            ordenarPorNivel();

            VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
            ordenamientos.setVisible(true);
            ordenamientos.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_MostrarPorNivelActionPerformed

    private void OrganizarAltoBajoValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrganizarAltoBajoValorActionPerformed
        this.ordenarDencendente = true;
        this.ordenarAscendente = false;
    }//GEN-LAST:event_OrganizarAltoBajoValorActionPerformed

    private void OrganizarBajoAltoValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrganizarBajoAltoValorActionPerformed
        this.ordenarAscendente = true;
        this.ordenarDencendente = false;
    }//GEN-LAST:event_OrganizarBajoAltoValorActionPerformed

    private void MostrarPorAtributoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarPorAtributoActionPerformed
        if (!ordenarAscendente && !ordenarDencendente) {

            JOptionPane.showMessageDialog(this, "Selecciona si ordenar Ascendente o Dencendente", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            lector.clear();
            lector.obtenerLista();
            ordenarPorAtributo();

            VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
            ordenamientos.setVisible(true);
            ordenamientos.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_MostrarPorAtributoActionPerformed

    private void MostrarPorAtaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarPorAtaqueActionPerformed
        if (!ordenarAscendente && !ordenarDencendente) {

            JOptionPane.showMessageDialog(this, "Selecciona si ordenar Ascendente o Dencendente", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            lector.clear();
            lector.obtenerLista();
            ordenarPorAtaque();

            VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
            ordenamientos.setVisible(true);
            ordenamientos.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_MostrarPorAtaqueActionPerformed

    private void MostrarPorDefensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarPorDefensaActionPerformed
        if (!ordenarAscendente && !ordenarDencendente) {

            JOptionPane.showMessageDialog(this, "Selecciona si ordenar Ascendente o Dencendente", "ERROR", JOptionPane.ERROR_MESSAGE);

        } else {

            lector.clear();
            lector.obtenerLista();
            ordenarPorDefensa();

            VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
            ordenamientos.setVisible(true);
            ordenamientos.setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_MostrarPorDefensaActionPerformed

    private void EscogerNivelesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscogerNivelesActionPerformed

    }//GEN-LAST:event_EscogerNivelesActionPerformed

    private void EscogerAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EscogerAtributosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EscogerAtributosActionPerformed

    private void ChooseLevelBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseLevelBActionPerformed

        int nivel = Integer.parseInt(EscogerNiveles.getSelectedItem().toString());

        ListaDoble<String[]> nuevasCartas = new ListaDoble<>();

        NodoDoble<String[]> current = lector.getCartas().getInicio();

        while (current != null) {
            String nivelCartaStr = current.getInfo()[6];
            if (!nivelCartaStr.isEmpty()) {
                int nivelCarta = Integer.parseInt(nivelCartaStr);

                if (nivelCarta == nivel) {

                    nuevasCartas.insertaFin(current.getInfo());
                }
            }
            current = current.getSig();
        }

        lector.setCartas(nuevasCartas);

        VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
        ordenamientos.setVisible(true);
        ordenamientos.setLocationRelativeTo(null);

        lector.clear();
        lector.obtenerLista();

    }//GEN-LAST:event_ChooseLevelBActionPerformed

    private void ChooseAtributeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseAtributeBActionPerformed

        String Atributo = EscogerAtributos.getSelectedItem().toString();

        ListaDoble<String[]> nuevasCartas = new ListaDoble<>();

        NodoDoble<String[]> current = lector.getCartas().getInicio();

        while (current != null) {
            String atributoCarta = current.getInfo()[7];
            if (!atributoCarta.isEmpty()) {
                if (atributoCarta.equals(Atributo)) {
                    nuevasCartas.insertaFin(current.getInfo());
                }
            }
            current = current.getSig();
        }

        lector.setCartas(nuevasCartas);
        VentanaOrdenamientos ordenamientos = new VentanaOrdenamientos();
        ordenamientos.setVisible(true);
        ordenamientos.setLocationRelativeTo(null);

        lector.clear();
        lector.obtenerLista();
    }//GEN-LAST:event_ChooseAtributeBActionPerformed

    public void ordenarPorNivel() {
        NodoDoble<String[]> current = lector.getCartas().getInicio();

        while (current != null) {
            NodoDoble<String[]> siguiente = current.getSig();

            while (siguiente != null) {
                String[] filaActual = current.getInfo();
                String[] filaSiguiente = siguiente.getInfo();

                String nivelActualStr = filaActual[6];
                String nivelSiguienteStr = filaSiguiente[6];

                if (!nivelActualStr.isEmpty() && !nivelSiguienteStr.isEmpty()) {

                    int nivelActual = Integer.parseInt(nivelActualStr);
                    int nivelSiguiente = Integer.parseInt(nivelSiguienteStr);

                    boolean intercambiar = (ordenarAscendente && nivelActual > nivelSiguiente)
                            || (ordenarDencendente && nivelActual < nivelSiguiente);

                    if (intercambiar) {
                        String[] temp = filaActual;
                        current.setInfo(filaSiguiente);
                        siguiente.setInfo(temp);
                    }
                } else {

                    if (nivelActualStr.isEmpty()) {
                        lector.eliminarCarta(current);
                    } else {
                        lector.eliminarCarta(siguiente);
                    }

                }

                siguiente = siguiente.getSig();
            }

            current = current.getSig();
        }
    }

    public void ordenarPorAtributo() {
        NodoDoble<String[]> current = lector.getCartas().getInicio();

        while (current != null) {
            NodoDoble<String[]> siguiente = current.getSig();

            while (siguiente != null) {
                String[] filaActual = current.getInfo();
                String[] filaSiguiente = siguiente.getInfo();

                String nivelActualStr = filaActual[7];
                String nivelSiguienteStr = filaSiguiente[7];

                if (!nivelActualStr.isEmpty() && !nivelSiguienteStr.isEmpty()) {

                    int comparacion = nivelActualStr.compareTo(nivelSiguienteStr);

                    boolean intercambiar = (ordenarAscendente && comparacion > 0)
                            || (ordenarDencendente && comparacion < 0);

                    if (intercambiar) {
                        String[] temp = filaActual;
                        current.setInfo(filaSiguiente);
                        siguiente.setInfo(temp);
                    }
                } else {
                    if (nivelActualStr.isEmpty()) {
                        lector.eliminarCarta(current);
                    } else {
                        lector.eliminarCarta(siguiente);
                    }
                }

                siguiente = siguiente.getSig();
            }

            current = current.getSig();
        }
    }

    public void ordenarPorAtaque() {
        NodoDoble<String[]> current = lector.getCartas().getInicio();

        while (current != null) {
            NodoDoble<String[]> siguiente = current.getSig();

            while (siguiente != null) {
                String[] filaActual = current.getInfo();
                String[] filaSiguiente = siguiente.getInfo();

                String nivelActualStr = filaActual[4];
                String nivelSiguienteStr = filaSiguiente[4];

                if (!nivelActualStr.isEmpty() && !nivelSiguienteStr.isEmpty()) {

                    int nivelActual = Integer.parseInt(nivelActualStr);
                    int nivelSiguiente = Integer.parseInt(nivelSiguienteStr);

                    boolean intercambiar = (ordenarAscendente && nivelActual > nivelSiguiente)
                            || (ordenarDencendente && nivelActual < nivelSiguiente);

                    if (intercambiar) {
                        String[] temp = filaActual;
                        current.setInfo(filaSiguiente);
                        siguiente.setInfo(temp);
                    }
                } else {
                    if (nivelActualStr.isEmpty()) {
                        lector.eliminarCarta(current);
                    } else {
                        lector.eliminarCarta(siguiente);
                    }
                }

                siguiente = siguiente.getSig();
            }

            current = current.getSig();
        }
    }

    public void ordenarPorDefensa() {
        NodoDoble<String[]> current = lector.getCartas().getInicio();

        while (current != null) {
            NodoDoble<String[]> siguiente = current.getSig();

            while (siguiente != null) {
                String[] filaActual = current.getInfo();
                String[] filaSiguiente = siguiente.getInfo();

                String nivelActualStr = filaActual[5];
                String nivelSiguienteStr = filaSiguiente[5];

                if (!nivelActualStr.isEmpty() && !nivelSiguienteStr.isEmpty()) {

                    int nivelActual = Integer.parseInt(nivelActualStr);
                    int nivelSiguiente = Integer.parseInt(nivelSiguienteStr);

                    boolean intercambiar = (ordenarAscendente && nivelActual > nivelSiguiente)
                            || (ordenarDencendente && nivelActual < nivelSiguiente);

                    if (intercambiar) {
                        String[] temp = filaActual;
                        current.setInfo(filaSiguiente);
                        siguiente.setInfo(temp);
                    }
                } else {
                    if (nivelActualStr.isEmpty()) {
                        lector.eliminarCarta(current);
                    } else {
                        lector.eliminarCarta(siguiente);
                    }
                }

                siguiente = siguiente.getSig();
            }

            current = current.getSig();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CollectionIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CollectionIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CollectionIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CollectionIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CollectionIDE().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseAtributeB;
    private javax.swing.JButton ChooseLevelB;
    private javax.swing.JComboBox<String> EscogerAtributos;
    private javax.swing.JComboBox<String> EscogerNiveles;
    private javax.swing.JButton MostrarPorAtaque;
    private javax.swing.JButton MostrarPorAtributo;
    private javax.swing.JButton MostrarPorDefensa;
    private javax.swing.JButton MostrarPorNivel;
    private javax.swing.JButton MostrarTodasCartas;
    private javax.swing.JCheckBox OrganizarAltoBajoValor;
    private javax.swing.JCheckBox OrganizarBajoAltoValor;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
}
